// infix is the basic form in which we write any algebric equation. Ex- a*b+c-d/e+f
// postfix is the better way of representation. Ex- ab*c+de/-f+ <- way of representing above equation in postfix form.



1.Evaluation of Postfix Expression

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int stoi(char *str)				// converts input sting to an integer
{
    int x;
    sscanf(str, "%d", &x);
    return x;
}


typedef struct stack				// stack to store the integer values 
{
	int top, capacity;			// top has the index of the last filled element, capacity the capacity and also works as a flag to find the error in the input syntax.
	int *arr;
}stack;

stack* createStack(int capacity)		// function to allocate the memory to a stack
{
	stack *st;
	st = (stack*)malloc(sizeof(stack));
	st->capacity=capacity;
	st->top=-1;					// initially top has none of the element so -1
	st->arr=(int*)malloc(capacity*sizeof(int));
	return st;
}

void push(stack *st, int c)			// if we need to push the integer element into the stack
{
	if(st->top==st->capacity)
	{
		//printf("invalid\n");		// this invalid represents that stack is full 
		st->capacity=-1;		// so we do capacity=-1, works as a flag , so if capacity==-1 error is there
		return;
	}
	st->top = (st->top)+1;			// else everything is fine and push the value
	(st->arr)[st->top] = c;
	return;
}

int pop(stack *st)				// if an operator comes then we need to pop 
{
	int ch;				
	if(st->top==-1)				// means stack is already empty , therefore we cannot pop
	{
		//printf("invalid\n");			// invalid shows it is empty
		st->capacity=-1;		// works as a flag for the error check
		return -1;
	}
	ch = (st->arr)[(st->top)];		// else everything is fine , pop the integer value
	st->top = (st->top)-1;
	return ch;
}

int charCheckerValue(char c, stack *st)		// if the given input is an character (operator) give their corresponding mapping value. As it takes character only with no boundation, there can be ? , ( , ), # etc kind of invalid characters also. 
{
	if(c=='+')		
		return 1;
	else if(c=='-')
		return 2;
	else if(c=='*')
		return 3;
	else if(c=='/')
		return 4;
	else if(c=='^')
		return 5;
	else		// means something wrong input is given which is not an integer as well as an operator. For example it can be ( , ) , ? , & , < , > , # etc. Any of these will cause invlaid syntax 
	{
		//printf("invalid\n");		// invalid
		st->capacity=-1;		// flag representing invalid syntax
		return -1;
	}
}

int charChecker(char c) 			// checks if the input is an operator or input is something else
{
	if(c=='+' | c=='-' | c=='*' | c=='/' | c=='^')
		return 1;
	return -1;
}

long int power(int a, int b)				// function for the power evaluation
{
	long int i;
	if(b==1)
		return a;
	else if(b%2==0)
	{	
		i = power(a, b/2);
		return i*i;
	}  
	else
	{
		i = power(a, (b-1)/2);
		return i*i*a; 
	}
}

void calculateValue(stack *st, char *c)			// actual function to evaluate the final value
{
	int ch1, ch2;
	int i;
	if(charChecker(c[0])!=1)			// if not an operator then push it on the stack example- integer.
		push(st, stoi(c));		// it can push non integer values as those are not operators. For example, it will push the ASCII value of { , } , < , > into the stack.
		
	// if the value inserted is an operator calculate the operation using last 2 operand with operator and put the final value on the stack, if it is an operand push it on the stack.
		
	else
	{
		ch1 = pop(st);		// pop out the last two integers into ch1 & ch2
		ch2 = pop(st);		// may be it has the ASCII value of < , > , ? etc.
		
	// here the ASCII value problem is solved by using the charCheckerValue function. As even if that ASCII value is in the stack , charChecker will give -1 as c[0] is a character which is not an operator, also capacity is -1 now.					|	
									|		
		if(ch1!=-1 && ch2!=-1)					|		
		{							|		
			if(charCheckerValue(c[0], st)==1)  <------------|
			{
				i = ch1+ch2;
				push(st, i);
			}
			else if(charCheckerValue(c[0], st)==2)
			{
				i = ch2-ch1;
				push(st, i);
			}
			else if(charCheckerValue(c[0], st)==3)
			{
				i =ch1*ch2;
				push(st, i);
			}
			else if(charCheckerValue(c[0], st)==4 && ch1!=0)	// means the divsion is valid as it is not dividing by zero
			{
				i = ch2/ch1;
				push(st, i);
			}
			else if(charCheckerValue(c[0], st)==4 && ch1==0)	// means it is trying to divide by zero , invalid
			{
				printf("division by 0\n");			// printing the invalid case
				st->capacity=-2;				// capacity is used as a flag , so if capacity is -2 then we have already printed .
				return ;
			}
			else if(charCheckerValue(c[0], st)==5)
			{
				i = power(ch2, ch1);
				push(st, i);
			}
			else 
				return;				// if charcheckerValue gives -1 then above all lines will not execute, so this line is to come out in that case.
		}
	}
	return;
}

int main (int argc, char **argv)
{
	stack *st;
	char ar[100];
	
	st = createStack(128);			// creating stack

    char line[128];
    char v1[15];
    char v2[15];
    char v3[15];

    int ret;
    int lineNo = 0;

    while (fgets(line, sizeof line, stdin) != NULL )
    {
        sscanf(line, "%s", v1);			// taking input as string 
        lineNo++;

        calculateValue(st, v1);			// calling the function that does all the work
        
    }
    if(st->top==0 && st->capacity!=-2)			// if the top is 0, means that it has only one element , capacity !=-2 ensures that it is valid and not 0
    	printf("%d\n", (st->arr)[0]);			// print the value at 0 index
    else if(st->capacity!=-2)				// means something went wrong but that wrong was not related to division by zero, so print invalid syntax
    	printf("invalid\n");
    	
        free(st);

    return 0;
}








2. Conversion of Infix Form to Postfix Form			// in this input is always valid so we don't need to take care of invalid input.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct stack					// forming a stack
{
	int top, capacity;
	char *ar;
}stack;

typedef struct queue					// forming a queue, as we need to print the value that is first inserted, it is better to use queue
{
	int front, rear, capacity;
	char *ar;
}queue;

stack *createStack(int capacity)			// allocting memory to a stack
{
	stack *st;
	st = (stack*)malloc(sizeof(stack));
	st->top = 0;					
	st->capacity = capacity;
	st->ar = (char*)malloc(capacity*sizeof(char));
	for(int i=0; i<capacity; i++)
		(st->ar)[i]='0';
	return st;
}

queue *createQueue(int capacity)	// allocating memory to a queue, this will always be a case of straight queue , circular part will not come ever, as we will never dequeue an element once queued. 
{
	queue *qu;
	qu = (queue*)malloc(sizeof(queue));
	qu->front = 0;					
	qu->rear = -1;			// means queue is empty
	qu->capacity = capacity;
	qu->ar = (char*)malloc(capacity*sizeof(char));
	return qu;
}

int priority(char c)			// sets priority to the the input operator
{
	if(c=='^')
		return 3;
	else if(c=='*' | c=='/')
		return 2;
	else if(c=='+' | c=='-')
		return 1;
	else 
		return -1;   
}

int checker(char c)			// checks if input character is an operator
{
	if(c=='+' | c=='*' | c=='/' | c=='^' || c=='(' | c==')' | c=='-')
		return 1;
	else 
		return 0;
}

void push(stack *st, char key)		// pushes the operator into the stack, stack only has characters
{
	st->top=(st->top)+1;
	(st->ar)[st->top]=key;
	//printf("pushing %c\n", (st->ar)[st->top]);
	return;
}

char pop(stack *st)			// popping out the value
{
	char ch;
	if(st->top==0)
	{
		return '?';
	}
	ch = (st->ar)[st->top];
	st->top = (st->top)-1;
	//printf("popping %c\n", ch);
	return ch;
}

char peek(stack *st)			// seeing the last character in the stack
{
	//printf("Peek value %c\n", (st->ar)[st->top]);
	return (st->ar)[st->top];
}

void queuee(queue *qu, char c)		// queue the character value in the queue
{
	qu->rear= (qu->rear)+1;
	(qu->ar)[qu->rear] = c;
	//printf("Queued value %c\n", c);
	return; 
}

void display(queue *qu)			// printing the queue characters
{
	int rear=qu->rear, front=qu->front;
	int helper=0;
	while(rear>=front)
	{
		printf("%c", (qu->ar)[(qu->front)+helper]);
		front++;
		helper++;
	}
	if(helper!=0)
		printf("\n");
}

int main()
{
	stack *sto;				// initializing stack pointer
	queue *pfix;				// initialzing queue pointer
	char inf[100], ch, ch2;
	int len, flag=0;
	
	scanf("%s", inf);			// input is a string
	len = strlen(inf);		
		
	sto = createStack(len);			// forming stack
	pfix = createQueue(len);		// forming queue
	
	for(int i=0; i<len; i++)
	{
		if(checker(inf[i])!=1)			// means character is an operand (A), therefore add it on postfix queue
			queuee(pfix, inf[i]);
		else					// means character is an operator (*, +, /, -) or it can be brackets. Push it on operator stack
		{	
			if(inf[i]=='(')			// if it is an opening bracket '(' then push it on the stack, '(' has heighest presidence 
				push(sto, '(');
			else if(inf[i]==')')		// if it is closing bracket then start popping it untill '(' comes, as stack contains operator only or it contains brackets
			{
				ch2=peek(sto);		// peeks the last value in the stack
				while(ch2!='(')		// untill '(' comes pop 
				{
					ch = pop(sto);
					queuee(pfix, ch);	// pop the operator and add it into the queue
					ch2=peek(sto);		// now again see the last value in the stack after one pop is done
				}
				
				ch2 = pop(sto);			// now '(' is the last element , therefore pop it
			}
			
			else				// means it an operator 
			{
				if(priority(inf[i])>priority((sto->ar)[(sto->top)]))		// if operator presidence is greater than last element of queue, add the value in the queue
					push(sto, inf[i]);					// example if '-' is there and '*' comes add it 
				else if(priority(inf[i])==priority((sto->ar)[(sto->top)]))	// else if priority are equal , pop the last element , add on the queue, push the input character into the stack
				{
					ch = pop(sto);
					queuee(pfix, ch);		// example if '-' is there on stack and '+' (inf[i]) comes , pop '-' add it on queue, push '+' on the stack  
					push(sto, inf[i]);
				}
				else
// else if priority of input is smaller than the last element, example '-' (inf[i]) comes and '*' is there in the stack as last element, pop and add to the queue untill priority becomes equal or stack becomes empty.  														|
															|
				{											|
					ch = peek(sto);			// stores the last character 			|
					while(priority(inf[i])<priority(ch))	<---------------------------------------|
					{
						ch = pop(sto);
						if(ch!='?')			// means stack is not empty 
							queuee(pfix, ch);
					}
					if((sto->ar)[sto->top]=='(') 	// if we encounters a '(' push input character (inf[i]) on the stack, as '(' has highest presidence
					{
						flag=1;			// flag 
						push(sto, inf[i]);
					}
					else if(priority(inf[i])==priority((sto->ar)[(sto->top)]) && flag==0)		// ensures that we have not encountered '('
					{
						ch = pop(sto);			// else if priority are equal , pop the last element , add on the queue, push the input character into the stack
						queuee(pfix, ch);
						push(sto, inf[i]);
					}
					else
						push(sto, inf[i]);		// else means now inf[i] has higher presidence than the top element of the stack, so push it on the stack
				}
			}
		}
	} 
	while(sto->top!=0 && (sto->ar)[sto->top]!='(')		// means untill we reach '(' or stack is empty pop the remaining elements and add on the queue
	{
		char c;
		queuee(pfix,(sto->ar)[sto->top]);
		c=pop(sto);
	}
	
	display(pfix);			// printing the elements of the queue

	return 0;
}
